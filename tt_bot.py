import datetime, telebot, json, time, random, re, locale
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from telebot import types
from jsons_handlers.jsons_handlers import json_reader, json_writer

ENV = 'UAT'


# static files/variable difinition
gms = 'jsons_data/games.json'
sch_file = 'jsons_data/schedule.json'
msg_file = 'jsons_data/msg_file.json'
tnk_file = 'jsons_data/tnk.json'
log_file = 'logs/log.txt'

alwd_members = ['creator', 'administrator', 'member']
admin_members = ['creator', 'administrator']
alwd_group = [-1001837008506] if ENV == 'UAT' else [-1001598215777]
grpID = -1001837008506 if ENV == 'UAT' else -1001598215777  # —á–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –±–æ–ª—Ç–∞–ª–∫–∞

bot_name_val = '@TT_mp_uat_bot' if ENV == 'UAT' else '@TT_mp_bot'
grp_for_chat_link = 'https://t.me/+UagC-5vXZpA3NjBi' if ENV == 'UAT' else 'https://t.me/tennis_mp'

# -1001837008506 UAT grp volleyball #–±–æ–ª—Ç–∞–ª–∫–∞ –∏ –≥—Ä—É–ø–ø–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –Æ–ê–¢–ï!
# -1001836885665 PRD grp volleyball –±–æ–ª—Ç–∞–ª–∫–∞
# -1001919608124 PRD grp volleyball –¥–ª—è –∑–∞–ø–∏—Å–∏
# -1001536861033 PRD grp soccer PRD bot
# -1001828324804 UAT grp soccer PRD bot + UAT bot;


lock_holder = None


def format_date1(date_str):
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    date_obj = datetime.strptime(date_str, '%d.%m.%Y')
    formatted_date = date_obj.strftime('%d.%m %a').upper()
    return formatted_date


def filter_past_dates(date_str):
    date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
    return date_obj >= datetime.now().date()


def log_any_incm(message):
    now = datetime.now()
    user = bot.get_chat(message.from_user.id)
    username = user.username if user.username else ''
    first_name = user.first_name if user.first_name else ''
    last_name = user.last_name if user.last_name else ''
    full_name = first_name + ' ' + last_name

    log = str(now) + ' || GROUP ID:' + str(message.chat.id) + '|| GROUP_msg: userID:' + str(message.from_user.id) + '|| nick: @' + str(username) + '|| fname:' + str(full_name) + '|| message:' + str(message.text)
    print(log)
    with open(log_file, 'a', encoding='utf-8') as file: file.write(log + '\n')



def games_extract(message, desc_input_to_games):
    print('------', datetime.now(), 'userID:', message.from_user.id, 'function games_extract - triggered------')

    gms_json_data = json_reader(gms)
    game_data = next((g for g in gms_json_data if g['desc'] == desc_input_to_games), None)
    gmdesc = game_data['desc']
    gmid = game_data['id']
    dateID = game_data['date']
    timeID = game_data['time']
    priceID = game_data['price']
    locationID = game_data['location']
    pl_IDs = game_data['players']
    rpl_IDs = game_data['reserved_players']
    players_list = "\n".join([f"{i + 1}. {'&#9989;' if player[2] else ''} {player[0].strip()}" for i, player in enumerate(pl_IDs)])
    res_pl_list = "\n".join([f"{i + 1}. {'&#9989;' if rplayer[2] else ''} {rplayer[0].strip()}" for i, rplayer in enumerate(rpl_IDs)])
    maxpl = game_data['max_players']
    maxrsrv = game_data['max_reservations']
    dur = game_data['duration_mins']
    sts = game_data['status']

    appl_list_main_msg = (
        f'<b>üóì{format_date1(dateID)} üïñ {timeID}‚è≥{dur}–º–∏–Ω </b>\n'
        f'<u>üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å üèì</u>\n\n'
        f'üìç {locationID}\n'
        f'&#128176; –°—Ç–æ–∏–º–æ—Å—Ç—å: {priceID}\n'
        f'&#128179; –û–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –±–µ–∑–Ω–∞–ª\n'
        f'&#9997; –ó–∞–ø–∏—Å—å/–æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n'
        f'{players_list}\n\n'
        '-----------\n'
        f'<b>–†–µ–∑–µ—Ä–≤</b>\n'
        f'{res_pl_list}\n\n'
        '-----------\n'
        f'–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã {bot_name_val}\n\n'
        '#–£–í–ê–ñ–ï–ù–ò–ï'
    )


    # n &  # 9989; - –æ–ø–ª–∞—á–µ–Ω–æ

    text_appl_err3 = '<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤—É (' + str(maxpl) + ') –∏ —Ä–µ–∑–µ—Ä–≤ (' + str(maxrsrv) + ') &#128532;</b>\n_______________________'

    return gms_json_data, game_data, gmid, gmdesc, dateID, timeID, priceID, locationID, pl_IDs, rpl_IDs, players_list, res_pl_list, maxpl, maxrsrv, dur, sts, appl_list_main_msg, text_appl_err3


def extract_msg_metadata(message):
    print('------', datetime.now(), ' function extract_msg_metadata - triggered------')
    # Use the user_context instance instead of global variables
    user = bot.get_chat(message.from_user.id)
    username = user.username if user.username else ''
    first_name = user.first_name if user.first_name else ''
    last_name = user.last_name if user.last_name else ''
    full_name = first_name + ' ' + last_name

    return user, username, first_name, last_name, full_name


def code_execution_lock(message):
    print('------', datetime.now(), 'code_execution_lock is triggerred for ', message.from_user.id)
    global lock_holder

    random_value = round(random.uniform(0.5, 1.0), 2)
    time.sleep(random_value)
    if lock_holder == None or lock_holder == message.from_user.id:
        lock_holder = message.from_user.id
        print('------', datetime.now(), 'user set his userID no-lock', lock_holder)
        print('------', datetime.now(), 'file not locked for', lock_holder)
    elif lock_holder != message.from_user.id:
        while lock_holder != None:
            print('------', datetime.now(), 'file is locked by', lock_holder)
            time.sleep(0.7)


class UserContext:
    def __init__(self):
        # define_user_based_inputs
        self.usr_prm = None
        self.usr_desc_inp = None


# Create an instance of UserContext
CurUsrCont = UserContext()


def schedule_refresher():
    global cr_mn_id, cr_mn_str, nx_mn_str, repl_txt2, schd, upcoming_games_list, keyboard3, future_events
    schd = json_reader(sch_file)

    # dates, months managements
    cr_mn_id = datetime.now().month
    cr_year = str(datetime.now().year)
    nxt_year = str(datetime.now().year + 1)
    months = {1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç', 9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å', 13: '–Ø–Ω–≤–∞—Ä—å'}
    day_translation = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±', 'Sun': '–í—Å'}
    cr_mn_str = months[cr_mn_id]
    nx_mn_str = months[cr_mn_id + 1]

    # all upcoming list
    future_events = []
    for year, months in schd.items():
        for month_events in months:
            for event in month_events:
                event_datetime_str = f"{event[0]} {event[1]}"
                event_datetime = datetime.strptime(event_datetime_str, "%d.%m.%Y %H:%M")

                if event_datetime > datetime.now():
                    future_events.append(event[3])
    # all upcoming list

    if cr_mn_id == 12:
        upcoming_games_list = schd[cr_year][cr_mn_id - 1] + schd[nxt_year][0]
    else:
        upcoming_games_list = schd[cr_year][cr_mn_id - 1] + schd[cr_year][cr_mn_id]

    if cr_mn_id == 12:
        curr_mn_games_list = schd[cr_year][cr_mn_id - 1]
        next_mn_games_list = schd[nxt_year][0]
    else:
        curr_mn_games_list = schd[cr_year][cr_mn_id - 1]
        next_mn_games_list = schd[cr_year][cr_mn_id]

    upcoming_games_list = [', '.join([format_date1(date), time, location]) for date, time, location, gdesc in upcoming_games_list if filter_past_dates(date)]  # upcoming_games_list is used for 3 buttons - –ó–ê–ü–ò–°–ê–¢–¨–°–Ø/–¢–ï–ö–£–©–ò–ô –°–ü–ò–°–û–ö/–û–¢–ú–ï–ù–ê. this list consists of 2 mothns: current and next. past dates are excluded
    upcoming_games_list.sort()
    upcoming_games_list.append('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì±')

    curr_mn_schedule_games_list = [', '.join([format_date1(date), time, location]) for date, time, location, gdec in curr_mn_games_list]
    next_mn_schedule_games_list = [', '.join([format_date1(date), time, location]) for date, time, location, gdesc in next_mn_games_list]

    curr_mn_schedule_games_list.sort()
    next_mn_schedule_games_list.sort()

    if cr_mn_id == 12:
        repl_txt2 = ("<u>ü§© –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–∏–≥—Ä) ü§©</u>\n\n<b>" + cr_mn_str + ", " + cr_year + "</b>" + "\n" + "\n".join(item for item in curr_mn_schedule_games_list if item) + "\n\n<b>" + nx_mn_str + ", " + nxt_year + "</b>\n" + "\n".join(item for item in next_mn_schedule_games_list if item))
    else:
        repl_txt2 = ("<u>ü§© –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–∏–≥—Ä) ü§©</u>\n\n<b>" + cr_mn_str + "</b>" + "\n" + "\n".join(item for item in curr_mn_schedule_games_list if item) + "\n\n<b>" + nx_mn_str + "</b>\n" + "\n".join(item for item in next_mn_schedule_games_list if item))

    # create the custom keyboard3
    keyboard3 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons3 = [KeyboardButton(text=tr) for tr in upcoming_games_list]
    keyboard3.add(*buttons3)
    # create the custom keyboard3


schedule_refresher()

bt_tkn = json_reader(tnk_file)['bot_tkn_UAT'] if ENV == 'UAT' else json_reader(tnk_file)['bot_tkn_PRD']
bot = telebot.TeleBot(bt_tkn)


commands = [types.BotCommand('start', '–ù—É —á—Ç–æ –Ω–∞—á–Ω–µ–º? –ù–∞–∂–∏–º–∞–π!'), types.BotCommand('admin', '–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞')]

bot.set_my_commands(commands)
but1_text = '‚Ñπ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
but2_text = 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
but3_text = 'üìç –õ–æ–∫–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–æ–∫ –∏ –ø–∞—Ä–∫–æ–≤–∫–∞'
but4_text = '‚úç –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
but5_text = 'üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã'
but6_text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'
but7_text = 'üßê –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫'


addg = None
usr_prm = None
user_contexts = {}




repl_txt1 = (
    f'<b>‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> \n \n'
    f'1. –°–æ–±–∏—Ä–∞–µ–º—Å—è –∏ –∏–≥—Ä–∞–µ–º –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å (–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ì–ë–£‚Ññ93, –º. –ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ\n\n'
    f'2. –í–æ–∑—Ä–∞—Å—Ç: 14+ \n \n'
    f'3. –£—Ä–æ–≤–µ–Ω—å - –ª—é–±–æ–π. –†–∞–¥—ã –≤—Å–µ–º :) \n \n'
    f'4. –°—Ç–æ–∏–º–æ—Å—Ç—å: 700‚ÇΩ/—á–∞—Å (–∑–∞ –æ–¥–∏–Ω —Å—Ç–æ–ª)\n\n'
    f'5. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É {bot_name_val}, –¥–∞–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n\n'
    f'<b>{but4_text}</b>\n <b>{but6_text}</b>.\n\n'
    f'üèê–£ –Ω–∞—Å –¥—Ä—É–∂–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ - —Ä–∞–¥—ã –≤—Å–µ–º.üèê\n \n'
    f'<a href="{grp_for_chat_link}">–ß–∞—Ç üéæ –±–æ–ª—å—à–æ–≥–æ –∏ üèì –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ú—è–∫–∏–Ω–∏–Ω–æ –ø–∞—Ä–∫</a> \n \n'
    f'–ü–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º @arturfather)'
)


#—Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏—è
repl_txt3 = (
    f'<b>‚û°Ô∏è –ì–ë–£ ‚Ññ93</b> - <i>—Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å</i> Ô∏è\n \n'
    f'–ü–∞—Ä–∫–æ–≤–∫–∞ —É –∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä—Ç –∫–æ–º–ø–ª–µ–∫—Å–∞ (–≤–æ –¥–≤–æ—Ä–∞—Ö - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)\n'
    f'üìç <a href="https://yandex.ru/maps/org/gbu_sportivnaya_shkola_93_na_mozhayke_otdeleniye_nastolnogo_tennisa/1114209373">–ú–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞</a>\n\n'
    f'–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤, –¥—É—à–µ–≤—ã–µ, –ø–µ—Ä–µ–æ–¥–µ–≤–∞–ª–∫–∏\n\n'
    f'  =========================\n\n'
    # f'<b>‚û°Ô∏è –¢–¶ –ö–∞–ø–∏—Ç–æ–ª–∏–π</b> Ô∏è\n \n'
    # f'–ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¢–¶ –ö–∞–ø–∏—Ç–æ–ª–∏–π (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è). \n'
    # f'üìç <a href="https://yandex.ru/maps/-/CDaCeNmh">–ú–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏ –∏ –¢–¶</a>\n\n'
    # f'4 –±–æ–ª—å—à–∏—Ö –ø–ª–æ—â–∞–¥–∫–∏, –º—è–≥–∫–∏–π –ø–∞—Ä–∫–µ—Ç, –¥—É—à–µ–≤—ã–µ, –ø–µ—Ä–µ–æ–¥–µ–≤–∞–ª–∫–∏\n \n'
    # f'  =========================\n\n'
    # f'<b>‚û°Ô∏è 2—Ö2 team</b> - <i>—Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–ª—è–∂–Ω—ã–π –≤–æ–ª–µ–π–±–æ–ª</i> Ô∏è\n \n'
    # f'–ü–∞—Ä–∫–æ–≤–∫–∞ –≤–¥–æ–ª—å —É–ª–∏—Ü—ã –õ—ã–∫–æ–≤—Å–∫–∞—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ). \n'
    # f'üìç <a href="https://yandex.ru/maps/-/CDFuRBla">–ú–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏ –∏ –ø–ª–æ—â–∞–¥–æ–∫</a>\n\n'
    # f'6 –∫–æ—Ä—Ç–æ–≤, —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –ø–æ–¥–æ–≥—Ä–µ–≤–∞–µ–º—ã–π –ø–µ—Å–æ–∫, –¥—É—à–µ–≤—ã–µ, –ø–µ—Ä–µ–æ–¥–µ–≤–∞–ª–∫–∏\n\n'
)

repl_txt4 = None
repl_txt6 = None

repl_err2 = '_______________________\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –≤ —Ä–µ–∑–µ—Ä–≤.\n\n–ü–µ—Ä–µ–Ω–µ—Å—É –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏</b>'


repl_err5 = (
    f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.'
    f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ <a href="{grp_for_chat_link}">–≥—Ä—É–ø–ø—É</a> –¥–ª—è –∑–∞–ø–∏—Å–∏/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É &#9940;'
)

repl_txt15 = '<b>–ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚ò∫\n\n‚ùó–ü–û–ñ–ê–õ–£–ô–°–¢–ê, –ù–ï –û–ü–ê–ó–î–´–í–ê–ô–¢–ï‚ùóÔ∏è</b>'
repl_err7 = 'OK &#128076;'
repl_txt16 = '<b>–ì–æ—Ç–æ–≤–æ! –û–¥–Ω–∞ —Ç–≤–æ—è –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå</b>'
rerepl_err8 = '<b>–ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üòï</b>'
repl_txt17 = '–ü–∏—à–∏ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é \n' + bot_name_val + '\n–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å &#128522; \n\n<i>—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ {count}—Å–µ–∫</i>'
repl_txt18 = '–ü—Ä–∏–≤–µ—Ç!\n\n –Ø –±–æ—Ç üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Åüèì –ú—è–∫–∏–Ω–∏–Ω–æ –ø–∞—Ä–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä\n\n –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ –≤–Ω–∏–∑—É ‚ÜòÔ∏è'
repl_txt19 = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'

bot_greeting_msg = ENV + '!!! '+ bot_name_val + ' has started working.' + ENV


# add game txts
help_for_adder_game = '–û–∫–µ–π, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω—é –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n-----------------------------------\n<b>add\n–î–î.–ú–ú.–ì–ì–ì–ì\n–ß–ß:–ú–ú\nXX\nYY\nZZ\n–¶–µ–Ω–∞\n–ú–µ—Å—Ç–æ</b>\n-----------------------------------\n–î–î.–ú–ú.–ì–ì–ì–ì - –¥–∞—Ç–∞ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏\n–ß–ß:–ú–ú - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\nXX- –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)\nYY - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ (–æ–±—ã—á–Ω–æ 18), \nZZ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≤ —Ä–µ–∑–µ—Ä–≤ (–æ–±—ã—á–Ω–æ 8)\n–¶–µ–Ω–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–ª–æ–≤–∞–º–∏ (–º–∞–∫—Å 15 —Å–∏–º–≤–æ–ª–æ–≤)\n–ú–µ—Å—Ç–æ - –ª–æ–∫–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ (–º–∞–∫—Å 25 —Å–∏–º–≤–æ–ª–æ–≤)\n‚ö†–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ù–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∏ –≤ –∫–Ω–æ—Ü–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤!‚ö†\n\n==========================\n–ü—Ä–∏–º–µ—Ä 1:\n\n<b>add\n01.01.2024\n20:00\n90\n18\n8\n300-500—Ä—É–±/—á–µ–ª\n–¢–¶ –®–∞–ø–∏—Ç–æ</b>\n\n—Ç–æ –µ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1 —è–Ω–≤ 2024, –Ω–∞—á–∞–ª–æ –≤ 20:00, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 90 –º–∏–Ω—É—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ - 18 –∞ –≤ —Ä–µ–∑–µ—Ä–≤ - 8 (–µ—Å–ª–∏ –≤—ã–ø–∏—à—É—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞). –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã - 300-500—Ä—É–±\—á–µ–ª. –õ–æ–∫–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∫–∏ - –¢–¶ –®–∞–ø–∏—Ç–æ\n\n==========================\n–ü—Ä–∏–º–µ—Ä 2:\n\n<b>add\n10.12.2023\n09:00\n120\n10\n0\n–ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n–ú–Ω–µ–≤–Ω–∏–∫–∏</b>\n\n—Ç–æ –µ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 10 –¥–µ–∫ 2023, –Ω–∞—á–∞–ª–æ –≤ 09:00, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 120 –º–∏–Ω—É—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ - 10 –∞ –≤ —Ä–µ–∑–µ—Ä–≤ - 0. –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ. –õ–æ–∫–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∫–∏ - –ú–Ω–µ–≤–Ω–∏–∫–∏'

adder_game_err = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>add help</b>'
adder_game_succ = '–ì–æ—Ç–æ–≤–æ, –¥–æ–±–∞–≤–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòä'
prev_date_add_attempt = '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ...'

# remove game txts
rmv_game_err = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>remove help</b>'
rmv_game_succ = '–ì–æ—Ç–æ–≤–æ, —É–¥–∞–ª–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòä'
help_for_remover_game = '–û–∫–µ–π, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∂–µ:\n\n'

admin_help = '<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞</b>\n\n <b><i><u>add help</u></i></b> - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ \n\n <b><i><u>remove help</u></i></b> - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n <i>–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n===================== \n –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ–º'

# create the custom keyboard1
keyboard1 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(*[KeyboardButton(text=text) for text in [but1_text, but2_text, but3_text, but4_text, but6_text, but7_text]])
# create the custom keyboard1




################################################################## Define static variables


# Define a function to handle ANY message
@bot.message_handler(func=lambda message: True)
def MSG_HANDLER(message):
    schedule_refresher()
    log_any_incm(message)
    print('------', datetime.now(), 'entered to INCOME msg handler------')

    user_id = message.from_user.id
    if user_id not in user_contexts:
        # If not, create a new instance and initialize it
        user_contexts[user_id] = UserContext()
    CurUsrCont = user_contexts[user_id]

    user, username, first_name, last_name, full_name = extract_msg_metadata(message)
    print('------', datetime.now(), 'AT THE START OF MSG HANDLER: username=', username, ' | CurUsrCont.usr_prm=', CurUsrCont.usr_prm, ' | CurUsrCont.usr_desc_inp=', CurUsrCont.usr_desc_inp, ' | lock_holder=', lock_holder)

    response_dict = {but1_text: repl_txt1,
                     but2_text: repl_txt2,
                     but3_text: repl_txt3,
                     but4_text: 'function',
                     but6_text: 'function',
                     but7_text: 'function'}

    if message.text in ['/start', '/start' + bot_name_val, bot_name_val, bot_name_val + ' ']:
        start_handler(message)

    elif message.chat.type == 'private' and message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì±':  # dont move this piece of block lower
        bot.send_message(message.chat.id, "–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º –º–æ–π —é–Ω—ã–π –¥—Ä—É–≥ üê£", reply_markup=keyboard1, parse_mode='HTML')
        CurUsrCont.usr_prm = None
        CurUsrCont.usr_desc_inp = None


    elif message.chat.type == 'private' and message.text == but4_text:
        CurUsrCont.usr_prm = 'a'
        bot.send_message(message.chat.id, repl_txt19, reply_markup=keyboard3, parse_mode='HTML')

    elif message.chat.type == 'private' and message.text == but6_text:
        CurUsrCont.usr_prm = 'd'
        bot.send_message(message.chat.id, repl_txt19, reply_markup=keyboard3, parse_mode='HTML')

    elif message.chat.type == 'private' and message.text == but7_text:
        CurUsrCont.usr_prm = 'l'
        bot.send_message(message.chat.id, repl_txt19, reply_markup=keyboard3, parse_mode='HTML')

    elif message.chat.type == 'private' and message.text in [but1_text, but2_text, but3_text, but5_text]:
        bot.send_message(chat_id=message.chat.id, text=response_dict[message.text], parse_mode='HTML', disable_web_page_preview=True)

    elif message.chat.type == 'private' and 'add' in message.text and (bot.get_chat_member(grpID, user.id)).status in admin_members:
        add_game_handler(message)

    elif message.chat.type == 'private' and 'remove' in message.text and (bot.get_chat_member(grpID, user.id)).status in admin_members:
        remove_game_handler(message)

    elif message.chat.type == 'private' and 'stat' in message.text and (bot.get_chat_member(grpID, user.id)).status in admin_members:
        statist_handler(message)

    elif message.chat.type == 'private' and message.text == '/admin' and (bot.get_chat_member(grpID, user.id)).status in admin_members:
        bot.send_message(message.chat.id, text=admin_help, parse_mode='HTML')

    elif message.text in upcoming_games_list and CurUsrCont.usr_prm:
        print('------', datetime.now(), 'specific date elif block start------')
        CurUsrCont.usr_desc_inp = message.text
        print('------', datetime.now(), 'username=', username, ' | CurUsrCont.usr_prm=', CurUsrCont.usr_prm, ' | CurUsrCont.usr_desc_inp=', CurUsrCont.usr_desc_inp)

        if CurUsrCont.usr_prm == 'a':
            application_handler(message, CurUsrCont)  # go to application handler
        elif CurUsrCont.usr_prm == 'd':
            cancellation_handler(message, CurUsrCont)  # go to remove application handler
        elif CurUsrCont.usr_prm == 'l':
            inquiry_handler(message, CurUsrCont)  # go to share list handler
        # elif CurUsrCont.usr_prm == 'm': money_text_handler(message, CurUsrCont)  # go to add money-marker handler

    print('------', datetime.now(), 'AT THE END OF MSG HANDLER: username=', username, ' | CurUsrCont.usr_prm=', CurUsrCont.usr_prm, ' | CurUsrCont.usr_desc_inp=', CurUsrCont.usr_desc_inp, ' | lock_holder=', lock_holder)


################################HANDLERS ############################################################

# application to training request handler
def application_handler(message, CurUsrCont):
    print('------', datetime.now(), 'entered to application function------')

    code_execution_lock(message)  # lock file based on userID

    # extract some values from functions
    user, username, first_name, last_name, full_name = extract_msg_metadata(message)
    gms_json_data, game_data, gmid, gdesc, dateID, timeID, priceID, locationID, pl_IDs, rpl_IDs, players_list, res_pl_list, maxpl, maxrsrv, dur, sts, appl_list_main_msg, text_appl_err3 = games_extract(message, CurUsrCont.usr_desc_inp)

    print('------', datetime.now(), 'within application  handler function - username=', username, ' | CurUsrCont.usr_prm=', CurUsrCont.usr_prm, ' | CurUsrCont.usr_desc_inp=', CurUsrCont.usr_desc_inp)

    if (bot.get_chat_member(grpID, user.id)).status not in alwd_members: text_apply_msg = repl_err5  # user not present in group. err5
    elif len(pl_IDs) >= maxpl and len(rpl_IDs) >= maxrsrv:  text_apply_msg = text_appl_err3  # no space in main / reservation lists. err3
    

    else:
        if len(pl_IDs) < maxpl:  # to add to the reserve list
            game_data['players'].append(['@' + username + ' ' + full_name, user.id, False])
            text_apply_msg = repl_txt15
        elif len(pl_IDs) >= maxpl and len(rpl_IDs) < maxrsrv:  # to add to the reserve list
            game_data['reserved_players'].append(['@' + username + ' ' + full_name, user.id, False])
            text_apply_msg = repl_err2

        json_writer(gms, gms_json_data)

        gms_json_data, game_data, gmid, gmdesc, dateID, timeID, priceID, locationID, pl_IDs, rpl_IDs, players_list, res_pl_list, maxpl, maxrsrv, dur, sts, appl_list_main_msg, text_appl_err3 = games_extract(message, CurUsrCont.usr_desc_inp)

    if text_apply_msg == repl_err5: bot.send_message(chat_id=message.chat.id, text=text_apply_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)  # - user not in grp. err5
    
    elif text_apply_msg == text_appl_err3:# no space in main/reserv lists. err3
        bot.send_message(chat_id=message.chat.id, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)
        bot.send_message(chat_id=message.chat.id, text=text_apply_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)
          
    
    else:
        bot.send_message(chat_id=message.chat.id, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)
        bot.send_message(chat_id=message.chat.id, text=text_apply_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)

        main_applic_msg = bot.send_message(chat_id=grpID, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True)

        # removing prev msg identified by 'GMDESC' in grpID
        msg_data = json_reader(msg_file)

        if gmdesc in msg_data:
            print('i going to remove msg initiated from application_handler')
            try:
                bot.delete_message(chat_id=grpID, message_id=msg_data[gmdesc])
            except:
                print('meesage for removal not found')

        msg_data[gmdesc] = main_applic_msg.message_id
        json_writer(msg_file, msg_data)
        # removing prev msg identified by 'GMDESC' in grpID

    CurUsrCont.usr_prm = None
    CurUsrCont.usr_desc_inp = None
    global lock_holder
    lock_holder = None


# cancellation from training request handler
def cancellation_handler(message, CurUsrCont):
    print('------', datetime.now(), 'entered to cancellation function------')

    code_execution_lock(message)

    user, username, first_name, last_name, full_name = extract_msg_metadata(message)
    gms_json_data, game_data, gmid, gmdesc, dateID, timeID, priceID, locationID, pl_IDs, rpl_IDs, players_list, res_pl_list, maxpl, maxrsrv, dur, sts, appl_list_main_msg, text_appl_err3 = games_extract(message, CurUsrCont.usr_desc_inp)

    print('------', datetime.now(), 'within application  handler function - username=', username, ' | CurUsrCont.usr_prm=', CurUsrCont.usr_prm, ' | CurUsrCont.usr_desc_inp=', CurUsrCont.usr_desc_inp)

    if (bot.get_chat_member(grpID, user.id)).status not in alwd_members:
        text_cancl_msg = repl_err5  # user not in group. err5

    elif not (any(user.id in player for player in game_data['players'])) and not (any(user.id in reserved_player for reserved_player in game_data['reserved_players'])):
        text_cancl_msg = rerepl_err8  # application to cancel not found

    elif any(user.id in player for player in game_data['players']) or any(user.id in reserved_player for reserved_player in game_data['reserved_players']):
        text_cancl_msg = repl_txt16
        # Remove one occurrence from the reserved_players list (from bottom to top)
        for i in range(len(game_data['reserved_players']) - 1, -1, -1):
            if user.id in game_data['reserved_players'][i]:
                del game_data['reserved_players'][i]
                break
        else:  # If no match found in reserved_players, remove one occurrence from players list (from bottom to top)
            for i in range(len(game_data['players']) - 1, -1, -1):
                if user.id in game_data['players'][i]:
                    del game_data['players'][i]
                    break
        while len(game_data['players']) < maxpl and len(game_data['reserved_players']) > 0:
            player_to_move = game_data['reserved_players'].pop(0)
            game_data['players'].append(player_to_move)

    json_writer(gms, gms_json_data)

    gms_json_data, game_data, gmid, gmdesc, dateID, timeID, priceID, locationID, pl_IDs, rpl_IDs, players_list, res_pl_list, maxpl, maxrsrv, dur, sts, appl_list_main_msg, text_appl_err3 = games_extract(message, CurUsrCont.usr_desc_inp)

    # cancellation from training request handler

    # send final message of cancel_application
    if text_cancl_msg == repl_err5: bot.send_message(chat_id=message.chat.id, text=text_cancl_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)  # user not in group. err5
    
    elif text_cancl_msg == rerepl_err8: # application of user not found. personal reply repl_err8
        bot.send_message(chat_id=message.chat.id, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)
        bot.send_message(chat_id=message.chat.id, text=text_cancl_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)  
    
    elif text_cancl_msg in repl_txt16:  # succesfully removed. clr_scc1
        bot.send_message(chat_id=message.chat.id, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)
        bot.send_message(chat_id=message.chat.id, text=text_cancl_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)

        main_cncl_msg = bot.send_message(chat_id=grpID, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True)

        # removing prev msg identified by 'GMDESC' in grpID
        msg_data = json_reader(msg_file)
        if gmdesc in msg_data:
            try:
                bot.delete_message(chat_id=grpID, message_id=msg_data[gmdesc])
            except:
                print('meesage for removal not found')
        msg_data[gmdesc] = main_cncl_msg.message_id
        json_writer(msg_file, msg_data)
        # removing prev msg identified by 'GMDESC' in grpID

    CurUsrCont.usr_prm = None
    CurUsrCont.usr_desc_inp = None
    global lock_holder
    lock_holder = None


# inquiry of training request handler
def inquiry_handler(message, CurUsrCont):
    print('------', datetime.now(), 'entered to inquiry function------')
    print('------', datetime.now(), 'CurUsrCont.usr_desc_inp WITHIN inquirt function =', CurUsrCont.usr_desc_inp)
    user, username, first_name, last_name, full_name = extract_msg_metadata(message)

    gms_json_data, game_data, gmid, gmdesc, dateID, timeID, priceID, locationID, pl_IDs, rpl_IDs, players_list, res_pl_list, maxpl, maxrsrv, dur, sts, appl_list_main_msg, text_appl_err3 = games_extract(message, CurUsrCont.usr_desc_inp)

    if (bot.get_chat_member(grpID, user.id)).status not in alwd_members:
        bot.send_message(chat_id=message.chat.id, text=repl_err5, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)  # user not in group.err5
    else:
        bot.send_message(chat_id=message.chat.id, text=appl_list_main_msg, parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard1)

    CurUsrCont.usr_prm = None
    CurUsrCont.usr_desc_inp = None


# start msg handler
def start_handler(message):
    print('------', datetime.now(), 'entered to start function------')
    if message.chat.id in alwd_group:
        # delete initiator message
        try:
            # Attempt to remove. Handler added in case if initiator has removed a message himself
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            now = datetime.now()
            error_description = str(e)
            log = f"{now} || Unable to delete user's message /start. Reason: {error_description} user: {message.from_user.id}"
            print(log)
            with open(log_file, 'a', encoding='utf-8') as file:
                file.write(log + '\n')

        # reply to user in group chat and make countdown timer
        msg_repl_priv_start = bot.send_message(chat_id=message.chat.id, text=repl_txt17.format(count=3), parse_mode='HTML')
        time.sleep(2)
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg_repl_priv_start.message_id, text=repl_txt17.format(count=2), parse_mode='HTML')
        time.sleep(2)
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg_repl_priv_start.message_id, text=repl_txt17.format(count=1), parse_mode='HTML')
        time.sleep(2)

        # remove own message
        bot.delete_message(chat_id=message.chat.id, message_id=msg_repl_priv_start.message_id)


    elif message.chat.type == 'private':
        bot.send_message(message.chat.id, repl_txt18, reply_markup=keyboard1, parse_mode='HTML')


# new game handler
def add_game_handler(message):
    print('------ENTERED TO ADD_GAME_HANDLER')
    pattern = r'add\n(\d{2}\.\d{2}\.\d{4})\n(\d{2}:\d{2})\n(\d{2,3})\n(\d{1,2})\n(\d{1})\n(.{0,20})\n(.{0,25})$'
    match = re.match(pattern, message.text)

    if match:
        new_dt, new_tm, new_dur, new_max_players, new_max_reservations, new_price, new_loc = match.groups()  # parse data from user input
        mnth = int(new_dt.split('.')[1])
        yr = (new_dt.split('.')[2])

    # add help request
    if message.text == 'add help':
        bot.send_message(chat_id=message.from_user.id, text=help_for_adder_game, parse_mode='HTML', disable_web_page_preview=True)

    # prev date attempt error
    elif match and datetime.strptime(new_dt, '%d.%m.%Y').replace(hour=23, minute=55, second=55) < datetime.now():
        bot.send_message(chat_id=message.from_user.id, text=prev_date_add_attempt, parse_mode='HTML', disable_web_page_preview=True)

    # adding new game
    elif match:
        print('------ADDING NEW GAME')
        code_execution_lock(message)

        # GAMES JSON UPDATE
        gms_json_data = json_reader(gms)  # get data from games file

        if gms_json_data == []:
            latest_id = 0
        else:
            latest_id = max(gms_json_data, key=lambda x: x.get('id', 0)).get('id', 0)  # define latest id
        new_id = latest_id + 1  # define new ID
        new_game = {
            "date": new_dt,
            "desc": str(format_date1(new_dt)) + ', ' + str(new_tm) + ', üìç' + str(new_loc),
            "duration_mins": new_dur,
            "id": new_id,
            "location": new_loc,
            "max_players": int(new_max_players),
            "max_reservations": int(new_max_reservations),
            "players": [],
            "price": new_price,
            "reserved_players": [],
            "status": "new",
            "time": new_tm
        }  # define new game object
        gms_json_data.append(new_game)  # append new game to gms_json_data object
        json_writer(gms, gms_json_data)  # write to file

        # SCHEDULE JSON UPDATE
        schedule_refresher()
        if schd[yr] == []:
            schd[yr][0].append([new_dt, new_tm, "üìç" + new_loc, str(format_date1(new_dt)) + ', ' + str(new_tm) + ', üìç' + str(new_loc)])
        else:
            schd[yr][mnth - 1].append([new_dt, new_tm, "üìç" + new_loc, str(format_date1(new_dt)) + ', ' + str(new_tm) + ', üìç' + str(new_loc)])
        json_writer(sch_file, schd)
        schedule_refresher()

        'get data about user-game adder'
        user, username, first_name, last_name, full_name = extract_msg_metadata(message)

        bot.send_message(chat_id=message.from_user.id, text=adder_game_succ, parse_mode='HTML', disable_web_page_preview=True)
        bot.send_message(chat_id=grpID,
                         text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>' + full_name + ' (@' + username + ')</b> –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚úÖ\n\n üóì' + format_date1(new_dt) + " üïñ " + new_tm + ", üìç" + new_loc + '\n\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è  / –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å - —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n<b>' + bot_name_val + '</b>', parse_mode='HTML', disable_web_page_preview=True)

    # error - format not matched
    else:
        bot.send_message(chat_id=message.from_user.id, text=adder_game_err, parse_mode='HTML', disable_web_page_preview=True)

    global lock_holder
    lock_holder = None


# remove game hander
def remove_game_handler(message):
    if message.text == 'remove help':
        schedule_refresher()

        # help_for_remover_game =  ('–û–∫–µ–π, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ:\n\n\n' + '\n'.join(f'```copy remove {item}```\n\n' for i, item in enumerate(future_events)))
        help_for_remover_game = '–û–∫–µ–π, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É - –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ—ë\n\n\n' + '\n'.join(f'<code>remove {item}</code>\n\n' for i, item in enumerate(future_events))

        bot.send_message(chat_id=message.from_user.id, text=help_for_remover_game, parse_mode='HTML', disable_web_page_preview=True)
    else:
        gm_to_remove = message.text.replace('remove ', '')
        if gm_to_remove in future_events:

            print('------ entered to removal game in schd sub-module')
            for year, months in schd.items():
                for month_index in range(len(months)):
                    schd[year][month_index] = [item for item in schd[year][month_index] if item[3] != gm_to_remove]
            json_writer(sch_file, schd)

            gms_data = json_reader(gms)
            gms_data = [item for item in gms_data if item['desc'] != gm_to_remove]
            json_writer(gms, gms_data)

            user, username, first_name, last_name, full_name = extract_msg_metadata(message)

            bot.send_message(chat_id=message.from_user.id, text=rmv_game_succ, parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(chat_id=grpID,
                             text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>' + full_name + ' (@' + username + ')</b> —É–¥–∞–ª–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚ùå\n\n' + gm_to_remove, parse_mode='HTML', disable_web_page_preview=True)

    global lock_holder
    lock_holder = None
    schedule_refresher()


def statist_handler(message):
    print('------ENTERED TO STATIST_HANDLER')
    games_data = json_reader('games.json')

    # Initialize a dictionary to store player counts by user ID
    player_counts_by_id = {}

    # Iterate through each game
    for game in games_data:
        # Initialize a set to store players for the current game
        players_in_game = set()
        # Extract players for the current game
        players = game['players']
        # Update player counts in the dictionary, considering only unique players per game
        for player_info in players:
            user_id = player_info[1]
            if user_id not in players_in_game:
                if user_id not in player_counts_by_id:
                    player_counts_by_id[user_id] = (player_info[0], 0)
                player_counts_by_id[user_id] = (player_info[0], player_counts_by_id[user_id][1] + 1)
                players_in_game.add(user_id)

    # Sort the dictionary items by values
    sorted_player_counts = sorted(player_counts_by_id.items(), key=lambda x: x[1][1], reverse=True)

    # Print the sorted player counts
    stat_msg = '‚úÖ –ù–∞—á–∏–Ω–∞—è —Å ' + str(games_data[0]['date']) + ' —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ' + str(games_data[-1]['id']) + '\n\n‚úÖ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n'

    cnt = 1
    for k, v in sorted_player_counts:
        stat_msg += str(cnt) + '. ' + str(v).replace('(', '').replace(')', '').replace("'", '').replace(',', ':') + '\n'
        cnt += 1

    bot.send_message(chat_id=message.from_user.id, text=stat_msg, parse_mode='HTML', disable_web_page_preview=True)


############################################################################################


# UAT-CHECK
bot.send_message(chat_id=527520543, text=bot_greeting_msg)

bot.polling()

